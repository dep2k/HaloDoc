type Conversation {
	#composite key
	createdAt: String
	username: String
	#attributes
	doctorId: String
	user: User
	doctor: Doctor
	pet: Pet
	status: String
	payment: String
	questionsAndAnswers: [ConversationQA]
}

type ConversationConnection {
	items: [Conversation]
	nextToken: String
}

type ConversationQA {
	question: String
	answer: String
}

input ConversationQAInput {
	question: String
	answer: String
}

input CreateConversationInput {
	user: UserInput
	doctor: DoctorInput
	questionsAndAnsers: [ConversationQAInput]
	pet: UpdatePetInput
}

input CreateDoctorInput {
	name: String
	speciality: String
	profilePic: String
	registrationId: String
	phoneNo: String
	email: String
	homeTown: String
	medicalCenter: String
	department: String
	address: String
}

input CreateHelperInput {
	name: String
	phoneNo: String
	email: String
	address: String
	password: String
	isAvailable: Boolean
}

input CreateMessageInput {
	content: String
	conversationId: ID!
	receiver: UserInput
	sender: UserInput
}

input CreatePetInput {
	username: String!
	category: String
	name: String
	race: String
	sex: String
	age: String
	origin: String
	use: String
	background: String
	weight: String
	vaccinations: [VaccinationInput]
}

input DeleteDoctorInput {
	doctorId: ID!
	name: String!
}


input DeleteHelperInput {
	id: ID!
	name: String
}

type Doctor {
	doctorId: ID
	name: String
	speciality: String
	profilePic: String
	registrationId: String
	phoneNo: String
	email: String
	homeTown: String
	medicalCenter: String
	department: String
	address: String
	createdAt: String
	isAvailable: Boolean
	isOnline: Boolean
}

type DoctorConnection {
	items: [Doctor]
	nextToken: String
}

input DoctorInput {
	name: String
	doctorId: String
	speciality: String
}

type Helper {
	id: ID!
	name: String
	phoneNo: String
	email: String
	address: String
	password: String
	isAvailable: Boolean
}

type HelperConnection {
	items: [Doctor]
	nextToken: String
}

type Message {
	# composite Key
	conversationId: ID!
	createdAt: String
	#attributes
	content: String!
	receiver: User
	sender: User
}

type MessageConnection {
	items: [Message]
	nextToken: String
}

type Mutation {
	# Conversations
	createConversation(input: CreateConversationInput!): Conversation
	updateConversation(input: UpdateConversationInput!): Conversation
	# Message
	createMessage(input: CreateMessageInput!): Message
	# Doctor
	createDoctor(input: CreateDoctorInput!): Doctor
	updateDoctor(input: UpdateDoctorInput!): Doctor
	deleteDoctor(input: DeleteDoctorInput!): Doctor
	# Helper
	createHelper(input: CreateHelperInput!): Helper
	updateHelper(input: UpdateHelperInput!): Helper
	deleteHelper(input: DeleteHelperInput!): Helper
	# Pet
	createPet(input: CreatePetInput!): Pet
	updatePet(input: UpdatePetInput!): Pet
}

type Pet {
	username: String!
	petId: ID!
	category: String
	name: String
	race: String
	sex: String
	age: String
	origin: String
	use: String
	background: String
	weight: String
	vaccinations: [Vaccination]
}

type PetsConnection {
	items: [Pet]
}

type Query {
	## Doctor
	getDoctor(doctorId: ID!, name: String!): Doctor
	listDoctors(limit: Int, nextToken: String): DoctorConnection
	listAvailableDoctors(speciality: String, limit: Int, nextToken: String): DoctorConnection
	listHelpers(filter: TableHelperFilterInput, limit: Int, nextToken: String): HelperConnection
	getPets(username: String): PetsConnection
	## Conversations
	getConversations(username: String): ConversationConnection
	listConversations(limit: Int, nextToken: String): ConversationConnection
}

type Subscription {
	subscribeToCreateConversation(doctorId: String): Conversation
		@aws_subscribe(mutations: ["createConversation"])
	subscribeToNewMessage(conversationId: ID!): Message
		@aws_subscribe(mutations: ["createMessage"])
	subscribeToCreateDoctor: Doctor
		@aws_subscribe(mutations: ["updateDoctor"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableHelperFilterInput {
	isAvailable: TableBooleanFilterInput
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateConversationInput {
	# composite key
	username: String
	createdAt: String
	# attributes
	doctor: UserInput
	helper: DoctorInput
	status: String
	payment: String
}

input UpdateDoctorInput {
	doctorId: ID!
	name: String
	speciality: String
	profilePic: String
	registrationId: String
	phoneNo: String
	email: String
	homeTown: String
	medicalCenter: String
	department: String
	address: String
	isAvailable: Boolean
}

input UpdateHelperInput {
	id: ID!
	name: String
	isAvailable: Boolean
	phoneNo: String
	email: String
	address: String
	password: String
}

input UpdatePetInput {
	username: String!
	petId: String
	category: String
	name: String
	race: String
	sex: String
	age: String
	origin: String
	use: String
	background: String
	weight: String
	vaccinations: [VaccinationInput]
}

type User {
	username: ID!
	fullName: String
	type: String
}

input UserInput {
	username: ID!
	fullName: String
	userType: String
}

type Vaccination {
	name: String
	date: String
}

input VaccinationInput {
	name: String
	date: String
}

type schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}